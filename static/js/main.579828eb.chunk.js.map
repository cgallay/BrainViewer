{"version":3,"sources":["brain_icon.svg","helper.js","components/BrainView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","data2numjs","data","niftiHeader","niftiImage","nifti","isCompressed","decompress","isNIFTI","typedData","readHeader","readImage","datatypeCode","NIFTI1","TYPE_UINT8","Uint8Array","TYPE_INT16","Int16Array","TYPE_INT32","Int32Array","TYPE_FLOAT32","Float32Array","TYPE_FLOAT64","Float64Array","TYPE_INT8","Int8Array","TYPE_UINT16","Uint16Array","TYPE_UINT32","Uint32Array","console","log","hasExtension","readExtensionData","jsdata","nj","array","slice","call","reshape","metaInfo","JSON","parse","err","flip","clone","BrainView","imageArray","attentionScale","selectedMap","attentionMapCallback","canvas1Ref","useRef","canvas2Ref","canvas3Ref","useState","attentionMap","setAttentionMap","setMetaInfo","currentSlice","setCurrentSlice","imgShape","imgShapePixel","Math","round","useEffect","color","d3","drawSlice","canvas","imageData","axis","image_max_value","max","l","xMax","yMax","context","node","getContext","image","createImageData","i","j","args","splice","get","putImageData","drawAttention","attentionData","image_min_value","min","overlayCanvas","document","createElement","attr","getImageData","pixelValue","c","r","g","b","drawImage","draw","includes","canvas1","canvas2","canvas3","current","on","cordY","offsetY","cordX","offsetX","style","ref","width","height","textAlign","margin","showUploadList","action","file","reader","FileReader","onloadend","result","attention","meta","readAsArrayBuffer","customRequest","type","className","Object","keys","length","padding","percent","pred","label","ReactGA","initialize","pageview","window","location","pathname","search","Dragger","Upload","App","isLoad","setIsLoaded","isLoading","setIsLoading","setImage","powerValue","setPowerValue","setSelectedMapCheckbox","span","concat","title","onChange","value","step","Group","options","tip","spinning","size","img","src","require","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.579828eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain_icon.bcb183bd.svg\";","import nifti from 'nifti-reader-js'\nimport nj from 'numjs'\n\nexport const data2numjs = function (data) {\n\n    var niftiHeader = null,\n        niftiImage = null,\n        niftiExt = null;\n\n    if (nifti.isCompressed(data)) {\n        data = nifti.decompress(data);\n    }\n\n    if (nifti.isNIFTI(data)) {\n        niftiHeader = nifti.readHeader(data);\n        //console.log(niftiHeader.toFormattedString());\n        niftiImage = nifti.readImage(niftiHeader, data);\n        // convert raw data to typed array based on nifti datatype\n        var typedData;\n\n        if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_UINT8) {\n            typedData = new Uint8Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_INT16) {\n            typedData = new Int16Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_INT32) {\n            typedData = new Int32Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_FLOAT32) {\n            typedData = new Float32Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_FLOAT64) {\n            typedData = new Float64Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_INT8) {\n            typedData = new Int8Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_UINT16) {\n            typedData = new Uint16Array(niftiImage);\n        } else if (niftiHeader.datatypeCode === nifti.NIFTI1.TYPE_UINT32) {\n            typedData = new Uint32Array(niftiImage);\n        } else {\n            return;\n        }\n        console.log(niftiHeader)\n\n        if (nifti.hasExtension(niftiHeader)) {\n            niftiExt = nifti.readExtensionData(niftiHeader, data);\n        }\n\n        var jsdata = nj.array([].slice.call(typedData)).reshape(182, 218, 182)\n    }\n    try {\n        var metaInfo = JSON.parse(niftiHeader['description'])\n    } catch (err) {\n        var metaInfo = {}\n    }\n\n    // Hardcoded flip as define in the header\n    jsdata = nj.flip(jsdata, 1)\n    jsdata = nj.flip(jsdata, 0).clone()\n    return [jsdata, metaInfo]\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\nimport { Card, Progress, Icon } from 'antd'\nimport Dragger from 'antd/lib/upload/Dragger';\nimport { data2numjs } from '../helper.js'\n\n\n\nfunction BrainView({ imageArray, attentionScale, selectedMap, attentionMapCallback}) {\n\n    const canvas1Ref = useRef(null);\n    const canvas2Ref = useRef(null);\n    const canvas3Ref = useRef(null);\n    const [attentionMap, setAttentionMap] = useState(null)\n    const [metaInfo, setMetaInfo] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState([90, 120, 120])\n    const imgShape = [182, 218, 182]\n    const w = 400\n    const imgShapePixel = [w, Math.round((w / imgShape[0]) * imgShape[1]), Math.round((w / imgShape[0]) * imgShape[2])]\n    console.log(imgShapePixel)\n    var attentionLoader = (file) => {\n        //setIsLoading(true)\n        var reader = new FileReader();\n        reader.onloadend = function (data) {\n            const [attention, meta] = data2numjs(reader.result)\n            setMetaInfo(meta)\n            setAttentionMap(attention)\n        }\n        reader.readAsArrayBuffer(file);\n        attentionMapCallback()\n\n    }\n\n    useEffect(() => {\n        var color = d3.interpolateTurbo\n        function drawSlice(canvas, imageData, slice, axis) {\n            var image_max_value = imageData.max()\n            var l = 0\n            if (axis == 0) {\n                var xMax = imgShape[1]\n                var yMax = imgShape[2]\n            } else if (axis == 2) {\n                var xMax = imgShape[0]\n                var yMax = imgShape[1]\n            } else {\n                var xMax = imgShape[0]\n                var yMax = imgShape[2]\n            }\n            var context = canvas.node().getContext(\"2d\"), image = context.createImageData(yMax, xMax);\n            for (var i = 0; i < xMax; ++i) {\n                for (var j = 0; j < yMax; ++j) {\n                    var args = [i, j]\n                    args.splice(axis, 0, slice)\n                    image.data[l + 0] = (imageData.get(...args) / image_max_value) * 255;\n                    image.data[l + 1] = (imageData.get(...args) / image_max_value) * 255;\n                    image.data[l + 2] = (imageData.get(...args) / image_max_value) * 255;\n                    image.data[l + 3] = 255\n                    l = l + 4\n                }\n            }\n            context.putImageData(image, 0, 0);\n        }\n\n        function drawAttention(canvas, attentionData, slice, axis) {\n            var image_min_value = attentionData.min()\n            var image_max_value = attentionData.max()\n            var l = 0\n            if (axis == 0) {\n                var xMax = imgShape[1]\n                var yMax = imgShape[2]\n            } else if (axis == 2) {\n                var xMax = imgShape[0]\n                var yMax = imgShape[1]\n            } else {\n                var xMax = imgShape[0]\n                var yMax = imgShape[2]\n            }\n            var overlayCanvas = document.createElement(\"canvas\");\n            overlayCanvas = d3.select(overlayCanvas)\n                .attr(\"width\", yMax)\n                .attr(\"height\", xMax);\n            var context = overlayCanvas.node().getContext(\"2d\"), image = context.getImageData(0, 0, yMax, xMax);\n            for (var i = 0; i < xMax; ++i) {\n                for (var j = 0; j < yMax; ++j) {\n                    var args = [i, j]\n                    args.splice(axis, 0, slice)\n                    var pixelValue = (attentionData.get(...args) - image_min_value) / (image_max_value - image_min_value)\n                    if (attentionScale !== null) {\n                        pixelValue = pixelValue ** attentionScale\n                    }\n                    var c = d3.rgb(color(pixelValue));\n                    image.data[l + 0] = c.r\n                    image.data[l + 1] = c.g\n                    image.data[l + 2] = c.b\n                    image.data[l + 3] = 100\n                    l = l + 4\n                }\n            }\n            context.putImageData(image, 0, 0);\n            canvas.node().getContext(\"2d\").drawImage(overlayCanvas.node(), 0, 0)\n        }\n        function draw() {\n            console.log(\"Drawing\")\n            if (imageArray !== null && selectedMap.includes(\"Brain\")) {\n                drawSlice(canvas1, imageArray, currentSlice[0], 0)\n                drawSlice(canvas2, imageArray, currentSlice[2], 2)\n                drawSlice(canvas3, imageArray, currentSlice[1], 1)\n            }\n            if (attentionMap && selectedMap.includes(\"Attention Map\")) {\n                drawAttention(canvas1, attentionMap, currentSlice[0], 0)\n                drawAttention(canvas2, attentionMap, currentSlice[2], 2)\n                drawAttention(canvas3, attentionMap, currentSlice[1], 1)\n            }\n\n        }\n\n        var canvas1 = d3.select(canvas1Ref.current)\n            .attr(\"width\", imgShape[0])\n            .attr(\"height\", imgShape[1]);\n        var canvas2 = d3.select(canvas2Ref.current)\n            .attr(\"width\", imgShape[1])\n            .attr(\"height\", imgShape[2]);\n        var canvas3 = d3.select(canvas3Ref.current)\n            .attr(\"width\", imgShape[0])\n            .attr(\"height\", imgShape[2]);\n        canvas1.on(\"click\", function () {\n            var cordY = Math.round((d3.event.offsetY / imgShapePixel[1]) * imgShape[1])\n            var cordX = Math.round((d3.event.offsetX / imgShapePixel[0]) * imgShape[0])\n            currentSlice[1] = cordY\n            currentSlice[2] = cordX\n            setCurrentSlice(currentSlice)\n            draw()\n        })\n        canvas2.on(\"click\", function () {\n            var cordY = Math.round((d3.event.offsetY / imgShapePixel[2]) * imgShape[2])\n            var cordX = Math.round((d3.event.offsetX / imgShapePixel[1]) * imgShape[1])\n            currentSlice[0] = cordY\n            currentSlice[1] = cordX\n            setCurrentSlice(currentSlice)\n            draw()\n        })\n        canvas3.on(\"click\", function () {\n            var cordY = Math.round((d3.event.offsetY / imgShapePixel[0]) * imgShape[0])\n            var cordX = Math.round((d3.event.offsetX / imgShapePixel[2]) * imgShape[2])\n            currentSlice[0] = cordY\n            currentSlice[2] = cordX\n            setCurrentSlice(currentSlice)\n            draw()\n        })\n        //console.log(attentionMap)\n\n        draw()\n\n    }, [imageArray, attentionMap, attentionScale, selectedMap])\n\n    return (<div><table style={{ 'background-color': 'black', 'border': 0, 'cellspacing': 0 }}>\n        <tr>\n            <td>\n                <canvas ref={canvas3Ref} style={{ width: imgShapePixel[0] }}></canvas>\n            </td>\n            <td>\n                <canvas ref={canvas2Ref} style={{ width: imgShapePixel[1] }}></canvas>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <canvas ref={canvas1Ref} style={{ width: imgShapePixel[2] }}></canvas>\n            </td>\n            <td>\n                {attentionMap === null ?\n                    <div style={{ height: 200, width: 200, textAlign: \"center\", margin: \"auto\" }}>\n\n                        <Dragger\n                            showUploadList={false}\n                            action={attentionLoader}\n                            customRequest={() => null}\n                        >\n                            <Icon type=\"plus\" style={{ 'fontSize': 50 }} />\n                            <br />\n                            <br />\n                            <p className=\"ant-upload-hint\">Click or drag attention map to this area for visualization.</p>\n\n                        </Dragger>\n                    </div>\n                    :\n                    <div>\n                        {Object.keys(metaInfo).length === 0 ? \"\" :\n                            <div style={{ padding: \"60px\" }}>\n                                <Card>\n                                    <Progress type=\"dashboard\" percent={Math.round(metaInfo.pred * 100)} />\n                                    <p>Dementia prediction</p>\n                                    <p>Ground truth is {metaInfo.label === 1 ? \"Dementia\" : \"Control\"}</p>\n                                </Card>\n                            </div>\n                        }\n                    </div>\n                }\n            </td>\n        </tr>\n    </table>\n    </div>)\n}\n\nexport default BrainView\n","import React, { useState } from 'react';\n\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport BrainView from './components/BrainView'\nimport { data2numjs } from './helper.js'\nimport { Slider, Spin, Upload, InputNumber, Checkbox, Card, Row, Col } from 'antd';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-158864251-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nconst { Dragger } = Upload;\n\n\nfunction App() {\n  const [isLoad, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [imageArray, setImage] = useState(null);\n  const [powerValue, setPowerValue] = useState(1)\n  const [selectedMap, setSelectedMapCheckbox] = useState([\"Brain\"])\n  var fileLoader = (file) => {\n    setIsLoading(true)\n    var reader = new FileReader();\n    reader.onloadend = function (data) {\n      const [img, metaInfo] = data2numjs(reader.result)\n      setImage(img)\n      setIsLoading(false)\n      setIsLoaded(true)\n    }\n    reader.readAsArrayBuffer(file);\n\n  }\n\n  return (\n    <div className=\"App\">\n      {!isLoad ?\n        <Spin tip=\"Loading...\" spinning={isLoading} size={'large'}>\n          <Dragger showUploadList={false} action={fileLoader} customRequest={() => null}>\n            <div className='custom-dragger'>\n              <img src={require('./brain_icon.svg')} height={100} width={100} />\n              <br />\n              <br />\n              <p className=\"ant-upload-text\">Click or drag image to this area for visualization.</p>\n            </div>\n          </Dragger>\n        </Spin> :\n        <div>\n          <Row>\n            <Col span={18}>\n              <BrainView imageArray={imageArray} attentionScale={powerValue} selectedMap={selectedMap} attentionMapCallback={() => setSelectedMapCheckbox(selectedMap.concat([\"Attention Map\"]))}></BrainView>\n            </Col>\n            <Col span={6}>\n              <Card title=\"Control Panel\">\n                <Slider\n                  min={1}\n                  max={10}\n                  onChange={setPowerValue}\n                  value={typeof powerValue === 'number' ? powerValue : 0}\n                  step={1}\n                ></Slider>\n                <InputNumber\n                  min={1}\n                  max={10}\n                  step={1}\n                  value={powerValue}\n                  onChange={setPowerValue}\n                />\n\n                <Checkbox.Group options={['Brain', 'Attention Map']} value={selectedMap} onChange={setSelectedMapCheckbox} />\n              </Card>\n            </Col>\n          </Row>\n\n        </div>}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}